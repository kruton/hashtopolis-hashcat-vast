name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
    - name: Free up disk space
      run: |
        echo "Available disk space before cleanup:"
        df -h
        
        # Remove .NET, Android, and other large installations to free up space
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/google/chrome
        sudo rm -rf /opt/microsoft/msedge
        sudo rm -rf /opt/microsoft/powershell
        sudo rm -rf /opt/pipx
        sudo rm -rf /usr/lib/mono
        sudo rm -rf /usr/local/julia*
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /opt/hostedtoolcache/go
        sudo rm -rf /opt/hostedtoolcache/node
        sudo rm -rf /opt/hostedtoolcache/Python
        sudo rm -rf /opt/hostedtoolcache/Ruby
        
        # Clean apt cache
        sudo apt-get clean
        
        # Remove swap file if it exists
        sudo swapoff -a || true
        sudo rm -f /swapfile || true
        
        echo "Available disk space after cleanup:"
        df -h

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha,prefix=pr-,enable=${{ github.event_name == 'pull_request' }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Disable caching for pull requests to save disk space
        cache-from: ${{ github.event_name != 'pull_request' && 'type=gha' || '' }}
        cache-to: ${{ github.event_name != 'pull_request' && 'type=gha,mode=max' || '' }}
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@v3

    - name: Sign container image with cosign
      if: github.event_name != 'pull_request'
      run: |
        images=""
        for tag in ${{ steps.meta.outputs.tags }}; do
          images+="${tag}@${{ steps.build.outputs.digest }} "
        done
        cosign sign --yes $images
      env:
        COSIGN_EXPERIMENTAL: 1

    - name: Generate SLSA provenance attestation
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Output image details
      if: github.event_name != 'pull_request'
      run: |
        echo "Image digest: ${{ steps.build.outputs.digest }}"
        echo "Image tags:"
        echo "${{ steps.meta.outputs.tags }}"
        echo ""
        echo "Pull the image with:"
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"